#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
	
	РезультатПроверки = ПроверкаДокументаНаИзменение(Ссылка, ВКМ_ДатаПроведенияРабот, ВКМ_ВремяНачалаРабот, ВКМ_ВремяОкончанияРабот, ВКМ_Специалист);
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РезультатПроверки",РезультатПроверки);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)
	Если ВКМ_Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(ВКМ_ОбслуживаниеКлиентаВКМ_ВыполненныеРаботы.ВКМ_ЧасыКОплатеКлиенту, 0)) КАК ВКМ_ЧасыКОплатеКлиенту,
			|	ВКМ_ОбслуживаниеКлиента.Ссылка,
			|	ВКМ_ОбслуживаниеКлиента.Дата,
			|	ВКМ_ОбслуживаниеКлиента.ВКМ_Договор,
			|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ВКМ_ПроцентОтРабот
			|ПОМЕСТИТЬ ВТ_ДанныеДокумента
			|ИЗ
			|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВКМ_ОбслуживаниеКлиента.ВКМ_ВыполненныеРаботы КАК
			|			ВКМ_ОбслуживаниеКлиентаВКМ_ВыполненныеРаботы
			|		ПО ВКМ_ОбслуживаниеКлиента.Ссылка = ВКМ_ОбслуживаниеКлиентаВКМ_ВыполненныеРаботы.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, ВКМ_Сотрудник = &ВКМ_Специалист) КАК
			|			ВКМ_УсловияОплатыСотрудниковСрезПоследних
			|		ПО ВКМ_ОбслуживаниеКлиента.ВКМ_Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.ВКМ_Сотрудник
			|ГДЕ
			|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ВКМ_ОбслуживаниеКлиента.Ссылка,
			|	ВКМ_ОбслуживаниеКлиента.Дата,
			|	ВКМ_ОбслуживаниеКлиента.ВКМ_Договор,
			|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ВКМ_ПроцентОтРабот
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДанныеДокумента.ВКМ_ЧасыКОплатеКлиенту,
			|	ВТ_ДанныеДокумента.Ссылка,
			|	ВТ_ДанныеДокумента.Дата,
			|	ВТ_ДанныеДокумента.ВКМ_Договор,
			|	ВТ_ДанныеДокумента.ВКМ_ПроцентОтРабот,
			|	ДоговорыКонтрагентов.ВКМ_ДатаНачалаДействия,
			|	ДоговорыКонтрагентов.ВКМ_ДатаОкончанияДействия,
			|	ДоговорыКонтрагентов.ВКМ_ЧасоваяСтавкаСпециалиста
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ПО ВТ_ДанныеДокумента.ВКМ_Договор = ДоговорыКонтрагентов.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ВКМ_Специалист", ВКМ_Специалист);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если (Дата >= ВыборкаДетальныеЗаписи.ВКМ_ДатаНачалаДействия И Дата <= ВыборкаДетальныеЗаписи.ВКМ_ДатаОкончанияДействия) И
			ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
				Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
				Движение.Период = Дата;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.ВКМ_Клиент = ВКМ_Клиент;
				Движение.ВКМ_Договор = ВКМ_Договор;
				Движение.ВКМ_КоличествоЧасов = ВыборкаДетальныеЗаписи.ВКМ_ЧасыКОплатеКлиенту;
				Движение.ВКМ_СуммаКОплате = ВыборкаДетальныеЗаписи.ВКМ_ЧасыКОплатеКлиенту * ВыборкаДетальныеЗаписи.ВКМ_ЧасоваяСтавкаСпециалиста;
				
				Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
				Движение.Период = Дата;
				Движение.ВКМ_Сотрудник = ВКМ_Специалист;
				Движение.ВКМ_ЧасовКОплате = ВыборкаДетальныеЗаписи.ВКМ_ЧасыКОплатеКлиенту;
				Движение.ВКМ_СуммаКОплате = ВыборкаДетальныеЗаписи.ВКМ_ЧасыКОплатеКлиенту * ВыборкаДетальныеЗаписи.ВКМ_ЧасоваяСтавкаСпециалиста * (ВыборкаДетальныеЗаписи.ВКМ_ПроцентОтРабот / 100);
				
		Иначе Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Дата документа не соответствует сроку действия договора.";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		КонецЦикла;
		
	
	Иначе Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Необходимо выбрать договор Абонентского обслуживания. Проведение документа отменено.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	РезультатПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РезультатПроверки", Новый Структура);
	//РезультатПроверки = ПроверкаДокументаНаИзменение(Ссылка, ВКМ_ДатаПроведенияРабот, ВКМ_ВремяНачалаРабот, ВКМ_ВремяОкончанияРабот, ВКМ_Специалист);
	ТекстСообщения = СформироватьТекстСообщенияТелеграм(РезультатПроверки);
	Если ТекстСообщения <> Неопределено Тогда
		СоздатьЗаписьВСправочникСообщенияТелеграм(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстСообщенияТелеграм(РезультатПроверки) Экспорт
	Если Не РезультатПроверки.Проведен Тогда
		Текст = "Создан новый документ № " + РезультатПроверки.ПроверяемыйДокумент.Номер + ". 
																						   |Дата проведения работ: "
			+ Дата + ". 
					 |Клиент: " + ВКМ_Клиент + ".";
	ИначеЕсли РезультатПроверки.ИзменениеВремениНачалаРабот = 0 И РезультатПроверки.ИзменениеВремениОкончанияРабот = 0
		И РезультатПроверки.ИзменениеДаты = 0 И РезультатПроверки.ИзменениеСпециалиста = 0 Тогда
		Текст = Неопределено;
	Иначе
		Текст = "В документе № " + РезультатПроверки.ПроверяемыйДокумент.Номер;
		Если РезультатПроверки.ИзменениеДаты <> 0 Тогда
			Текст = Текст + ". 
							|Изменена Дата проведения работ. Новое значение: " + РезультатПроверки.ИзменениеДаты + ".";
		КонецЕсли;
		Если РезультатПроверки.ИзменениеСпециалиста <> 0 Тогда
			Текст = Текст + ". 
							|Изменен Специалист. Новое значение: " + РезультатПроверки.ИзменениеСпециалиста + ".";
		КонецЕсли;
		Если РезультатПроверки.ИзменениеВремениНачалаРабот <> 0 Тогда
			Текст = Текст + ". 
							|Изменено Время начала работ. Новое значение: "
				+ РезультатПроверки.ИзменениеВремениНачалаРабот + ".";
		КонецЕсли;
		Если РезультатПроверки.ИзменениеВремениОкончанияРабот <> 0 Тогда
			Текст = Текст + ". 
							|Изменено Время окончания работ. Новое значение: "
				+ РезультатПроверки.ИзменениеВремениОкончанияРабот + ".";
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

Процедура СоздатьЗаписьВСправочникСообщенияТелеграм(Текст) Экспорт
	НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
	НовыйЭлемент.ВКМ_ТекстСообщения = Текст;
	НовыйЭлемент.Записать();
	
	//ВКМ_ТелеграмКлиентСервер.ОтправкаСообщенияВТелеграм(Текст);
КонецПроцедуры
Функция ПроверкаДокументаНаИзменение(Ссылка, Дата, ВремяНачалаРабот, ВремяОкончанияРабот, Специалист) Экспорт
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПроверяемыйДокумент", Ссылка);
	РезультатПроверки.Вставить("Проведен", Ссылка.Проведен);
	Если Дата <> Ссылка.ВКМ_ДатаПроведенияРабот Тогда
		РезультатПроверки.Вставить("ИзменениеДаты", Формат(Дата, "ДЛФ=DD"));
	Иначе
		РезультатПроверки.Вставить("ИзменениеДаты", 0);
	КонецЕсли;
	Если ВремяНачалаРабот <> Ссылка.ВКМ_ВремяНачалаРабот Тогда
		РезультатПроверки.Вставить("ИзменениеВремениНачалаРабот", Формат(ВремяНачалаРабот, "ДЛФ=T"));
	Иначе
		РезультатПроверки.Вставить("ИзменениеВремениНачалаРабот", 0);
	КонецЕсли;
	Если ВремяОкончанияРабот <> Ссылка.ВКМ_ВремяОкончанияРабот Тогда
		РезультатПроверки.Вставить("ИзменениеВремениОкончанияРабот", Формат(ВремяОкончанияРабот, "ДЛФ=T"));
	Иначе
		РезультатПроверки.Вставить("ИзменениеВремениОкончанияРабот", 0);
	КонецЕсли;
	Если Специалист <> Ссылка.ВКМ_Специалист Тогда
		РезультатПроверки.Вставить("ИзменениеСпециалиста", Специалист);
	Иначе
		РезультатПроверки.Вставить("ИзменениеСпециалиста", 0);
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции
#КонецОбласти